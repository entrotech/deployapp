@model Sabio.Web.Models.ViewModels.BaseViewModel
@{
    ViewBag.Title = "Ng0";
    Layout = "~/Views/Shared/_LayoutAlternate.cshtml";
}



<h2>Angular Example 4 (Sabioization)</h2>

<div>
    <div ng-controller='exController as exVm' class="row">
        <div class="col-md-12">
            <p>In this example, we modify Example 3 to move common angular setup stuff into separate javascript files.</p>
            <p>
                This example builds upon Example 3 by switching to the _Layout.cshtml, which used bundled css and js files to set up angular in a consistent way.
                It is helpful to know that:
            </p>
            <ul>
                <li>
                    The ng-app directive is included in the _LayoutAlternate.cshtml layout and names the module "SabioApp",
                    so we should remove the ng-app directive that we used in Ex 3.
                </li>
                <li>The angular module creation is moved to sabio.module.js at about line 13. All the pre-requisites for angular module creation must appear before this in the constructed HTML file. So we can remove the module creation IIFE from the page.</li>
                <li>
                    A global variable APPNAME is declared on about line 123 of _LayoutAlternate.cshtml as well.
                    On line 13 of sabio.js, this is used to set the sabio.moduleOptions.APPNAME property, which, in turn, is used when creating the module as the module name.
                    When you need to reference the module name for registering services, etc. use the APPNAME variable.
                </li>
                <li>The sabio.module.js file also defines a set of default module dependencies that are commonly used on many pages, so we do not need to worry about module dependencies for this (and a few other modules). </li>
                <li>When we create angular service wrappers, we will "inherit" from a base service, which adds a few dependencies to our service. </li>
                <li>
                    When we create angular controllers, we will "inherit" from a base controller, which gives us access to commonly used services,
                    such as the $alertService. Consequently, we do not need to explicitly set up DI for the services $alertService and $window.
                </li>
                <li>
                    From this page, it is relatively straightforward to go to the /example/index page described in Angular Video #1.  That video explains
                    just a few additional Sabio things, but presents a less complete editing experience that provided here.
                </li>
            </ul>
            <p>
                <button type="button" data-ng-click="exVm.goHome()">Go to Home Page</button>
            </p>
        </div>
        <div class="col-md-6">
            <div class="panel panel-default">
                <div class="panel-heading">
                    <span class="h4">Blog Tags</span>
                    <button type="button" class="btn btn-primary btn-xs pull-right " data-ng-click="exVm.add()">Add New Blog Tag</button>
                </div>
                <div class="panel-body">
                    <div>
                    <ul>
                        <li data-ng-repeat="item in exVm.items">
                            <a ng-click="exVm.select(item)">{{item.keyword}}</a>
                        </li>
                    </ul>
                </div>
            </div>
        </div>
        <div class="col-md-6">
            <div class="panel panel-default" ng-show="exVm.item">
                <div class="panel-heading">
                    <span class="h4">Create / Edit Blog Tag</span>
                </div>
                <div class="panel-body" style="margin-left: 15px; margin-right: 15px;">
                    <form name="editForm" class="form-horizontal">
                        <div class="form-group">
                            <label>Id: </label><span ng-bind="exVm.item.id | uppercase"></span>
                        </div>
                        <div class="form-group">
                            <label>Name</label>
                            <input type="text" class="form-control" ng-model="exVm.item.keyword" />
                        </div>
                        <button type="button" class="btn btn-primary btn-sm" ng-click="exVm.save()">Save</button>
                        <button type="button" class="btn btn-default btn-sm" ng-click="exVm.cancel()">Cancel</button>
                        <button type="button" class="btn btn-warning btn-sm" ng-click="exVm.delete()">Delete</button>
                    </form>

                </div>
            </div>
        </div>

    </div>
</div>

@section pageInitScripts{
    @*
        You would need to put script tags here to import angular modules, so they are available before the angular module
        creation is done.
    *@
}

@section scripts {
    <script src="/Scripts/sabio.services.blogTag.js"></script>

    <script>

        sabio.page.model = @Html.RawJson(Model);

        (function () {
            "use strict";
            angular.module(APPNAME)
                 .factory('blogTagService', BlogTagService);

            BlogTagService.$inject = ['$baseService', '$sabio'];    //  $sabio is a reference to sabio.page object which is created in sabio.js

            function BlogTagService($baseService, $sabio) {
                var aSabioServiceObject = sabio.services.blogTag;
                // Simlates inheritance, giving access to $window and $location services and the getNotifier function
                // to our new service.
                var newService = $baseService.merge(true, {}, aSabioServiceObject, $baseService);
                return newService;
            }

        })();

        (function () {
            "use strict";
            angular.module(APPNAME)
            .controller('exController', ExController);

            ExController.$inject = ['$scope', '$window', '$baseController', 'blogTagService', '$sabio'];

            function ExController($scope, $window, $baseController, blogTagService, $sabio) {
                // Administrative stuff
                var vm = this;
                vm.$scope = $scope;
                vm.$sabio = $sabio;
                // Simulate inheritance to add
                // $document, $log, $route, $routeParams, $systemEventService, $alertService, $sabio services
                // to our controller.
                $baseController.merge(vm, $baseController);
                vm.blogTagService = blogTagService;
                vm.$window = $window;
                vm.model = vm.$sabio.model;

                // ViewModel
                vm.goHome = _goHome;
                vm.items = [];
                vm.item = null;  // copy of item being edited
                vm.itemIndex = -1; // index of item being edited
                vm.select = _select;
                vm.save = _save;
                vm.cancel = _cancel;
                vm.add = _add;
                vm.delete = _delete;

                // "The fold"

                _render();

                function _render() {
                    vm.blogTagService.getAll(_getAllSuccess, _getAllError);
                }

                function _goHome() {
                    vm.$window.location.href = '/';
                }

                function _getAllSuccess(data) {
                    vm.$scope.$apply(function () {
                        vm.items = data.items;
                    });
                    vm.$alertService.success("Retrieved all");
                }

                function _getAllError(jqXHR) {
                    vm.$alertService.error(jqXHR.responseText, "GetAll failed");
                }

                function _select(foo) {
                    // Keep track of the position in vm.items of
                    // the item we will be editing
                    vm.itemIndex = vm.items.indexOf(foo);
                    // get a fresh copy of the object to be edited from the database.
                    vm.blogTagService.getById(foo.id, _getByIdSuccess, _getByIdError)
                }

                function _getByIdSuccess(data) {
                    if (data.item) {
                        vm.$scope.$apply(function () {
                            vm.item = data.item;
                        });
                    }
                    vm.$alertService.success("Retrieved item for editing from database");
                }

                function _getByIdError(jqXHR) {
                    vm.$alertService.error(jqXHR.responseText, "GetById failed");
                }

                // create a new empty item
                function _add() {
                    // Changing item from null to empty object indicates any
                    // ui components for editing should be shown
                    vm.item = {};
                    vm.itemIndex = -1;
                }

                function _cancel() {
                    _endEdit();
                }

                function _endEdit() {
                    vm.item = null;
                    vm.itemIndex = -1;
                }

                function _save() {
                    if (vm.item.id) {
                        vm.blogTagService.putJson(vm.item.id, vm.item, _putSuccess, _putError);
                    }
                    else {
                        vm.blogTagService.postJson(vm.item, _postSuccess, _postError);
                    }
                }

                function _putSuccess(data) {
                    vm.$scope.$apply(function () {
                        // for update, replace with new version
                        vm.items[vm.itemIndex] = vm.item;
                        _endEdit();
                        vm.$alertService.success("Update successful");
                    });
                }

                function _putError(jqXHR) {
                    vm.$alertService.error(jqXHR.responseText, "Update failed");
                }

                function _postSuccess(data) {
                    if (data.item) {
                        vm.$scope.$apply(function () {
                            // To sync the UI, get id from data and push vm.item onto vm.items array
                            vm.item.id = data.item;
                            vm.items.push(vm.item);
                            _endEdit();
                            vm.$alertService.success("Insert successful");
                        });
                    }
                }

                function _postError(jqXHR) {
                    vm.$alertService.error(jqXHR.responseText, "Insert failed");
                }

                function _delete() {
                    if (vm.item.id) {
                        vm.blogTagService.delete(vm.item.id, _deleteSuccess, _deleteError);
                    }
                }

                function _deleteSuccess(data) {
                    vm.$scope.$apply(function () {
                        // To update UI, replace with new version
                        vm.items.splice(vm.itemIndex, 1);
                        _endEdit();
                        vm.$alertService.success("Delete successful");
                    });
                }

                function _deleteError(jqXHR) {
                    vm.$alertService.error(jqXHR.responseText, "Delete failed");
                }
            }

        })();

    </script>
}




