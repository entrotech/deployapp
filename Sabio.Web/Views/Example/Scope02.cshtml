
@{
    ViewBag.Title = "Scope01";
    Layout = "~/Views/Shared/_EmptyLayout.cshtml";
}

<h2>Scope Events Propagation</h2>
<ul>
    <li>
        Using &quot;controller as&quot; syntax sort of changes
        the nature of this example, but still illustrates that the
        $rootScope can be accessed without dot notation using
        prototypical scope inheritance.
    </li>
</ul>

@section styles{
    <style>
        .show-scope-demo.ng-scope,
        .show-scope-demo .ng-scope {
            border: 1px solid red;
            margin: 3px;
        }
    </style>
}


<div ng-app="eventExample" ng-controller="EventController as ec1">
    Root scope <tt>MyEvent</tt> count: {{ec1.count}}
    <ul>
        <li ng-repeat="i in [1]" ng-controller="EventController as ec2">
            <button ng-click="ec2.emit('MyEvent')">emit</button>
            <button ng-click="ec2.broadcast('MyEvent')">broadcast</button>
            <br>
            Middle scope <tt>MyEvent</tt> count: {{ec2.count}}
            <ul>
                <li ng-repeat="item in [1, 2]" ng-controller="EventController as ec3">
                    Leaf scope <tt>MyEvent</tt> count: {{ec3.count}}
                </li>
            </ul>
        </li>
    </ul>
</div>

@section scripts{

    <script src="~/Scripts/angular.js"></script>

    <script>
        (function () {
            "use strict";

            angular.module('eventExample', [])
                .controller('EventController', EventController);

            EventController.$inject = ['$scope'];

            function EventController($scope) {
                var vm = this;
                vm.$scope = $scope;

                vm.count = 0;
                vm.emit = _emit;
                vm.broadcast = _broadcast;
                vm.$scope.$on('MyEvent', _incrementCounter);

                // Fold

                function _incrementCounter() {
                    vm.count++;
                }

                function _emit(evtName) {
                    vm.$scope.$emit(evtName);
                }

                function _broadcast(evtName) {
                    vm.$scope.$broadcast(evtName);
                }
            }


        })();


    </script>


}





