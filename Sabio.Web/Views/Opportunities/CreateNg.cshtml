
@{
    ViewBag.Title = "CreateNg";
    Layout = "~/Views/Shared/_BlogLayout.cshtml";
}




<style>
    .panel-body {
        margin-left: 15px;
        margin-right: 15px;
    }
</style>


<div data-ng-app="SabioApp" class="content" id="content">
    <div class="row">
        <h1 class="text-center"><strong>Opportunities - CREATE NG</strong></h1>
    </div>

    <div ng-controller="opportunityController as oppVm" class="container">
        <div class="row">
            <div class="panel-group col-md-12">
                <!-- begin panel -->
                <div class="panel panel-inverse" data-sortable-id="form-stuff-1">
                    <!-- ng-show="oppVm.item" -->
                    <!-- why does oppVm.item pull up the form? -->
                    <div class="panel-heading">
                        <div class="panel-heading-btn">
                            <a href="javascript:;" class="btn btn-xs btn-icon btn-circle btn-default" data-click="panel-expand"><i class="fa fa-expand"></i></a>
                            <a href="javascript:;" class="btn btn-xs btn-icon btn-circle btn-success" data-click="panel-reload"><i class="fa fa-repeat"></i></a>
                            <a href="javascript:;" class="btn btn-xs btn-icon btn-circle btn-warning" data-click="panel-collapse"><i class="fa fa-minus"></i></a>
                            <a href="javascript:;" class="btn btn-xs btn-icon btn-circle btn-danger" data-click="panel-remove"><i class="fa fa-times"></i></a>
                        </div>
                        <h4 class="panel-title">Add Opportunity</h4>
                    </div>
                    <div class="panel-body">
                        <form name="opportunityForm" ng-submit="oppVm.submitForm(opportunityForm.$valid)" novalidate>
                            <!-- OPP FORM -->

                            <div class="form-group">
                                <label for="name">Name / Title</label>
                                <input type="text" class="form-control" name="name" ng-model="oppVm.item.name" ng-maxlength="50"
                                       ng-class="{'form-validate' : oppVm.submitted && opportunityForm.name.$invalid}" required>
                                <p ng-show="oppVm.submitted && opportunityForm.name.$invalid" class="error-msg">Name / Title is required.</p>
                                <p ng-show="opportunityForm.name.$error.maxlength" class="error-msg">Name / Title is too long.</p>
                            </div>

                            <div class="form-group">
                                <label class="control-label">Date(s)</label>
                                <div class="">
                                    <div class="row">
                                        <div class="col-xs-6">
                                            <input type="text" class="form-control" name="dateTimeStart" placeholder="Start Date"
                                                   datetimepicker ng-model="oppVm.item.dateTimeStart"
                                                   on-change="oppVm.update(oppVm.item.dateTimeStart, oppVm.item.dateTimeEnd)"
                                                   options="oppVm.optionsFrom" />
                                        </div>
                                        <div class="col-xs-6">
                                            <input type="text" class="form-control" name="dateTimeEnd" placeholder="End Date"
                                                   datetimepicker ng-model="oppVm.item.dateTimeEnd"
                                                   on-change="oppVm.update(oppVm.item.dateTimeStart, oppVm.item.dateTimeEnd)"
                                                   options="oppVm.optionsTo" />
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <div class="form-group">
                                <label for="description">Description</label>
                                <textarea type="text" class="form-control" name="description" rows="5" ng-model="oppVm.item.description" ng-maxlength="500"
                                          ng-class="{'form-validate' : oppVm.submitted && opportunityForm.description.$invalid}" required></textarea>
                                <p ng-show="oppVm.submitted && opportunityForm.description.$invalid" class="error-msg">Description is required.</p>
                                <p ng-show="opportunityForm.description.$error.maxlength" class="error-msg">Description is too long.</p>
                            </div>

                            <div class="form-group">
                                <label for="contactPersonFirstName">Contact Person First Name</label>
                                <input type="text" class="form-control" name="contactPersonFirstName" ng-model="oppVm.item.contactPersonFirstName" ng-maxlength="50"
                                       ng-class="{'form-validate' : oppVm.submitted && opportunityForm.contactPersonFirstName.$invalid}" required>
                                <p ng-show="oppVm.submitted && opportunityForm.contactPersonFirstName.$invalid" class="error-msg">First name is required.</p>
                                <p ng-show="opportunityForm.contactPersonFirstName.$error.maxlength" class="error-msg">First name is too long.</p> <!-- not needed.  input has native limit?-->
                            </div>

                            <div class="form-group">
                                <label for="contactPersonLastName">Contact Person Last Name</label>
                                <input type="text" class="form-control" name="contactPersonLastName" ng-model="oppVm.item.contactPersonLastName" ng-maxlength="50"
                                       ng-class="{'form-validate' : oppVm.submitted && opportunityForm.contactPersonLastName.$invalid}" required>
                                <p ng-show="oppVm.submitted && opportunityForm.contactPersonLastName.$invalid" class="error-msg">Last name is required.</p>
                                <p ng-show="opportunityForm.contactPersonLastName.$error.maxlength" class="error-msg">Last name is too long.</p> <!-- not needed.  input has native limit?-->
                            </div>

                            <div class="form-group">
                                <label for="email">Email</label>
                                <input type="email" class="form-control" name="email" ng-model="oppVm.item.email" ng-maxlength="50"
                                       ng-class="{'form-validate' : oppVm.submitted && opportunityForm.email.$invalid}" required>
                                <p ng-show="oppVm.submitted && opportunityForm.email.$invalid" class="error-msg">Email is required.</p>
                                <p ng-show="opportunityForm.email.$error.maxlength" class="error-msg">Email is too long.</p>
                            </div>

                            <div class="form-group">
                                <label for="phone">Phone</label>
                                <input type="text" class="form-control" name="phone" ng-model="oppVm.item.phone">
                            </div>

                            <div class="form-group">
                                <label for="address1">Address 1</label>
                                <input type="text" class="form-control" name="address1" ng-model="oppVm.item.address1">
                            </div>

                            <div class="form-group">
                                <label for="address2">Address 2</label>
                                <input type="text" class="form-control" name="address2" ng-model="oppVm.item.address2">
                            </div>

                            <div class="form-group">
                                <label for="city">City</label>
                                <input type="text" class="form-control" name="city" ng-model="oppVm.item.city">
                            </div>

                            <div class="form-group">
                                <label for="stateProvinceId">State / Province</label>
                                <select class="form-control" name="stateProvinceId" ng-model="oppVm.item.stateProvinceId"
                                        ng-options="stateProvince.id as stateProvince.name for stateProvince in oppVm.stateprovinceitems">
                                    <option>{{oppVm.item.stateProvince}}</option>
                                </select>
                            </div>

                            <div class="form-group">
                                <label for="postalCode">Zip Code</label>
                                <input type="text" class="form-control" name="postalCode" ng-model="oppVm.item.postalCode">
                            </div>

                            <div class="form-group">
                                <label for="countryId">Country</label>                                                          <!-- first position = value of select box; 2nd position is name of value, oppend up by "as"; 3rd line level variable; 4th pulls in data.items. -->
                                <select class="form-control" name="countryId" ng-model="oppVm.item.countryId"
                                        ng-options="country.id as country.name for country in oppVm.countryitems"
                                        g-click="oppVm.GetTargetStateProv()">
                                    <option>{{oppVm.item.country}}</option>
                                </select>
                            </div>

                            <button type="button" class="btn btn-primary save" ng-click="oppVm.submitted=true; oppVm.submitForm(opportunityForm.$valid)">Save</button>

                            <a class="btn btn-default" ng-click="oppVm.cancel()">Cancel</a>
                            <button type="button" class="btn btn-danger delete" ng-click="oppVm.delete()">Delete</button>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>


@section pageInitScripts{
    <script src="~/Assets/Admin/plugins/moment/moment.min.js"></script>
    <script src="~/Assets/Admin/plugins/bootstrap-datetimepicker/js/bootstrap-datetimepicker.js"></script>
    <script src="~/Assets/Admin/plugins/bootstrap-eonasdan-datetimepicker/build/js/bootstrap-datetimepicker.min.js"></script>
    <script src="~/Scripts/angular-eonasdan-datetimepicker.js"></script>
    <script>
        sabio.moduleOptions.extraModuleDependencies.push('ae-datetimepicker');
    </script>
}

@section scripts{
    <script src="~/Scripts/sabio.services.opportunity.js"></script>
    <script src="~/Scripts/sabio.services.geography.js"></script>

    <script type="text/javascript">

        // OPPORTUNITY SERVICE
        (function () {
            "use strict";
            angular.module(APPNAME)
                .factory('opportunityService', OpportunityService);

            OpportunityService.$inject = ['$baseService', '$sabio'];

            function OpportunityService($baseService, $sabio) {
                var opportunitySvcObj = sabio.services.opportunity;
                var newOpportunitySvc = $baseService.merge(true, {}, opportunitySvcObj, $baseService);
                return newOpportunitySvc;
            }
        })();
        // GEOGRAPHY SERVICE
        (function () {
            "use strict";
            angular.module(APPNAME)
                .factory('geographyService', GeographyService);

            GeographyService.$inject = ['$baseService', '$sabio'];

            function GeographyService($baseService, $sabio) {
                var SvcObj = sabio.services.geography;
                var newSvcObj = $baseService.merge(true, {}, SvcObj, $baseService);
                return newSvcObj;
            }
        })();
        // OPPORTUNITY CONTROLLER
        (function () {
            angular.module(APPNAME)
                .controller('opportunityController', OpportunityController);

            OpportunityController.$inject = ['$scope', '$window', '$baseController', 'opportunityService', 'geographyService'];

            function OpportunityController($scope, $window, $baseController, opportunityService, geographyService) {
                var vm = this;
                vm.$scope = $scope;
                $baseController.merge(vm, $baseController);
                vm.opportunityService = opportunityService;
                vm.geographyService = geographyService;
                vm.$window = $window;

                // ViewModel
                vm.items = [];
                vm.item = null;
                vm.itemIndex = -1;
                vm.submitted = false;
                vm.submitForm = _submitForm;                    // Kicks off validator.
                vm.save = _save;
                vm.cancel = _cancel;
                vm.delete = _delete;
                vm.edit = _edit;

                // G E T  S T A T E / P R O V
                vm.GetTargetStateProv = _GetTargetStateProv;

                vm.optionsFrom = { format: 'LLL', showClear: true };
                vm.optionsTo = { format: 'LLL', showClear: true };
                vm.update = function (dateTimeStart, dateTimeEnd) {
                    vm.optionsFrom.maxDate = dateTimeEnd;
                    vm.optionsTo.minDate = dateTimeStart;
                };


                // "The Fold"
                _render();

                // < " T H E  F O L D " > \\
                function _render() {
                    vm.geographyService.getAllCountries(_getAllCountrySuccess, _getAllCountryError);
                    vm.geographyService.getAllStateProvinces(_getAllStateProvincesSuccess, _getAllStateProvincesError);
                    //vm.opportunityService.getAll(_getAllSuccess, _getAllError);
                }

                function _timeConvert() {
                    console.log("this is my Time Convert function.")
                    vm.item.dateTimeStart = vm.item.dateTimeStart.toISOString();
                    vm.item.dateTimeEnd = vm.item.dateTimeEnd.toISOString();
                }
                // G E T  A L L  --  don't need tis since we're doing page-based ajax calls.
                //function _getAllSuccess(data) {
                //    console.log(data);
                //    vm.$scope.$apply(function () {
                //        vm.items = data.items;
                //        vm.totalItems = data.items.length;
                //        //vm.filteredItems = vm.items.slice(0, vm.itemsPerPage);  // ditch for now....
                //    });
                //}

                //function _getAllError(jqXHR) {
                //    vm.$alertService.error(jqXHR.responsiveText, "GetAll failed");
                //}

                // G E T  B Y  I D  -  S U C C E S S
                function _getByIdSuccess(data) {
                    console.log("GetById success");
                    if (data.item) {
                        vm.$scope.$apply(function () {
                            vm.item = data.item;
                            vm.item.stateProvinceId = vm.item.stateProvince.id;
                            vm.item.countryId = vm.item.country.id;
                            vm.item.dateTimeStart = moment(vm.item.dateTimeStart).toDate();
                            vm.item.dateTimeEnd = moment(vm.item.dateTimeEnd).toDate();
                        });
                    }
                    vm.$alertService.success("GetById success");
                }
                // G E T  B Y  I D  -  E R R O R
                function _getByIdError(jqXHR) {
                    vm.$alertService.error(jqXHR.responsiveText, "GetById failed");
                }
                // G E T  A L L  C O U N T R I E S
                function _getAllCountrySuccess(data) {
                    console.log("Get all COUNTRY success.");
                    console.log(data);
                    if (data.items) {
                        vm.countryitems = data.items;
                    }
                }

                function _getAllCountryError(jqXHR) {
                    vm.$alertService.error(jqXHR.responsiveText, "GetAll countries failed");
                }
                // G E T  A L L  S T A T E  /  P R O V I N C E S
                function _getAllStateProvincesSuccess(data) {
                    console.log("Get all STATE success.");
                    console.log(data);
                    if (data.items) {
                        vm.stateprovinceitems = data.items;
                    }
                }

                function _getAllStateProvincesError(jqXHR) {
                    vm.$alertService.error(jqXHR.responsiveText, "GetAll state / provinces failed");
                }
                // G E T  S T A T E  B Y  I D
                function _GetTargetStateProv() {
                    console.log("This is my Get Target StateProv Function.");
                    vm.geographyService.getStateProvincesByCountryId(
                        vm.item.countryId,
                        _getAllStateProvincesSuccess,
                        _getAllStateProvincesError);
                }
                // V A L I D A T O R
                function _submitForm(isValid) {
                    if (isValid) {
                        console.log("data is valid.");
                        _save();
                    }
                    else {
                        console.log("form data is invalid.");
                    }
                }
                // E D I T
                function _edit(data) {
                    vm.itemIndex = vm.items.indexOf(data);
                    console.log(data);
                    vm.opportunityService.getById(data.id, _getByIdSuccess, _getByIdError);
                    //vm.pageChanged();
                    vm.houdini = true;
                }

                function _endEdit() {
                    vm.item = null;
                    vm.itemIndex = -1;
                    vm.submitted = false;
                }
                // S A V E
                function _save() {
                    if (vm.item.id) {
                        _timeConvert();
                        console.log("This is my SAVE function.")

                        vm.opportunityService.putJson(vm.item.id, vm.item, _putSuccess, _putError);
                    }
                    else {
                        vm.opportunityService.postJson(vm.item, _postSuccess, _postError);
                    }
                }
                // S A V E  -  P O S T  S U C C E S S
                function _postSuccess(data) {
                    if (data.item) {
                        vm.$scope.$apply(function () {
                            vm.item.id = data.item;
                            vm.items.push(vm.item);
                            vm.$alertService.success("POST successful.");
                            console.log("This is my POST Success function.");
                            console.log(data);
                        })
                    }
                }
                // S A V E  -  P O S T  E R R O R
                function _postError(jqXHR) {
                    vm.$alertService.error(jqXHR.responseText, "POST failed.");
                }

                function _putSuccess(data) {
                    vm.$scope.$apply(function () {
                        vm.items[vm.itemIndex] = data.item;
                        vm.$alertService.success("PUT successful.");
                        console.log("this is my PUT SUCCESS function.");
                        console.log(data);
                        // add route to index page.
                    })
                }

                function _putError(jqXHR) {
                    vm.$alertService.error(jqXHR.responsiveText, "PUT failed");
                    console.log("PUT failed.");
                }
                // D E L E T E
                function _delete() {
                    console.log("this is my delete function.");
                    vm.opportunityService.deleteJson(vm.item.id, _deleteSuccess, _deleteError);
                }

                function _deleteSuccess(data) {
                    vm.$scope.$apply(function (data) {
                        vm.items.splice(vm.itemIndex, 1);
                        vm.$alertService.success("Delete successful.");
                        console.log("this is my delete success function.");
                    });
                }

                function _deleteError() {
                    vm.$alertService.error(jqXHR.responseText, "Delete failed");
                    console.log("delete failed");
                }

                function _cancel() {
                    console.log("This is my cancel function");
                    window.location.assign("http://deploy.dev/opportunities")
                    _endEdit();
                }
                // S E A R C H
                // S E A R C H  -  S U C C E S S
                // S E A R C H  -  E R R O R
                // C R E A T E  F O R M
                // P A G I N A T E
            }



        })();

    </script>



}
