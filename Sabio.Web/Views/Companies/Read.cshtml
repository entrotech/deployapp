@model Sabio.Web.Models.ViewModels.ItemViewModel<int>
@{
    ViewBag.Title = "read";
    Layout = "~/Views/Shared/_HomeLayout.cshtml";
}

@section styles {
    <style>
        .jobPosting {
            border-style: solid;
            border-width: 1px;
            padding-left: 20px;
        }

        #newPosting {
            margin-top: 10px;
        }

        .content {
            margin-left: 100px;
        }

        .result-info2 {
            margin-top: 15px;
        }

        .days-ago {
            text-align: center;
            display: inline-block;
        }

        .float-left {
            float: left;
        }

        .item {
            background: #fff;
        }

        .search-toolbar {
            margin-top: 20px;
        }

        .title {
            text-align: left;
            margin-left: 30px;
        }

        .search-item-container .item-row .item {
            width: 100%;
        }

        .days-ago {
            float: right;
            margin: 15px 15px;
            text-align: center;
            display: inline-block;
        }

        .result-list .title {
            margin: 8px 0px 20px 20px;
            font-size: 20px;
            line-height: 24px;
            display: inline-block;
        }

        .result-list .title a {
            color: #333;
        }

        .result-list .location {
            color: #999;
        }

        .result-list .desc {
            margin-bottom: 20px;
            max-height: 32px;
            overflow: hidden;
            text-overflow: ellipsis;
            line-height: 16px;
        }

        .float-left {
            float: left;
        }

        .search-container .search-content {
            width: 100%;
        }

        .content {
            padding: 70px 0 0 0;
            margin: 0 0 0 0;
        }

        .contact {
            margin: 8px 0 20px 20px;
        }

        .item .row {
            padding: 0 15px 0 30px;
        }

        .float-right {
            float: right;
        }
    </style>
}

<div id="search-results" class="section-container bg-silver">
    <!-- BEGIN container -->
    <div class="container">
        <!-- BEGIN search-container -->
        <div class="search-container">
            <!-- BEGIN search-content -->
            <div class="search-content" id="searchContent">
                <!-- BEGIN search-toolbar -->
                <h1><span id="companyName"></span></h1>
                <div class="search-item-container result-list item-row item">
                    
                    <div class="result-info col-xs-12 col-md-6">
                        <h4 class="contact"><strong>Contact Information</strong></h4>
                        <div class="float-left">
                            <div class="row">
                                <h4 id="companyPhoneNumber"></h4>
                            </div>
                            <div class="row">
                                <h4 id="companyEmail"></h4>
                            </div>
                        </div>
                    </div>
                    <div class="result-info2 col-xs-12 col-md-6">
                        <div class="float-left">
                            <h4><span id="address1"></span>,&nbsp;<span id="address2"></span></h4>
                            <h4><span id="city"></span>,&nbsp;<span id="stateProvince"></span>&nbsp;<span id="postalCode"></span></h4>
                            <h4><span id="country"></span></h4>
                        </div>
                    </div>
                </div>
                <h3><strong>Open Positions</strong></h3>
                <div class="search-item-container result-list" id="jobPostingContainer">
                </div>
            </div>
        </div>
        <hr />


    </div>

</div>

@section Scripts{

    <script src="~/Scripts/sabio.services.company.js"></script>
    <script src="~/Scripts/jquery.tmpl.js"></script>
    <script type="text/x-jquery-tmpl" id="jobPosting">
        <div class="item-row">
            <div class="item">
                <div class="positionName">
                    <h4 class="title"><a href="/jobpostings/${id}">${positionName}</a></h4>
                    <span class="days-ago">
                        <small>Posted ${daysAgo}</small>
                    </span>
                </div>
                <div class="result-info col-s-5 col-xs-6">
                    <div class="float-left">
                        <p class="desc">${streetAddress}</p>
                        <p class="desc">${location}</p>
                        {{if jobTagsString}}<p class="desc">Tags: ${jobTagsString}</p>{{/if}}
                    </div>
                </div>
                <div class="result-info2 col-s-3 col-xs-6">
                    <div class="float-left">
                        <p class="desc">${compensationString}</p>
                        <p class="desc">${experienceLevel}</p>
                        <p class="desc">${duration}</p>
                    </div>
                </div>
            </div>
        </div>
    </script>
    <script>

        sabio.page.id = @Model.Item;

        sabio.page.onGetSuccess = function (data) {
            $("#companyName").text(data.item.name);
            $("#companyPhoneNumber").text(data.item.phoneNumber);
            $("#companyEmail").text(data.item.email);
            $("#address1").text(data.item.address1);
            $("#address2").text(data.item.address2);
            $("#city").text(data.item.city)
            $("#stateProvince").text(data.item.stateProvince.name);
            $("#postalCode").text(data.item.postalCode);
            $("#country").text(data.item.country.name);
            sabio.page.postPostings(data.item.jobPostings);
        }

        sabio.page.onGetError = function () {
            console.log("Never received Id's");
        }

        sabio.page.postPostings = function (jobPostings) {
            for (i = 0; i < jobPostings.length; i++) {
                // Attach job tags
                if (jobPostings[i].jobTags) {
                    var jobTagsArray = [];
                    for (j = 0; j < jobPostings[i].jobTags.length; j++) {
                        jobTagsArray.push(jobPostings[i].jobTags[j].keyword);
                    }
                    var jobTagsString = jobTagsArray.join(", ");
                    jobPostings[i].jobTagsString = jobTagsString;
                }
                // Attach days ago
                var t = jobPostings[i].dateCreated.split(/[- : T]/);
                var d = new Date(Date.UTC(t[0], t[1] - 1, t[2], t[3], t[4], t[5]));
                var today = new Date();
                var daysAgo = parseInt((today - d) / 86400000);
                if (daysAgo == 1) {
                    daysAgo = daysAgo + " day ago";
                } else {
                    daysAgo = daysAgo + " days ago";
                }
                jobPostings[i].daysAgo = daysAgo;
                // Build location
                var locationArray = [];
                if (jobPostings[i].city) {
                    locationArray.push(jobPostings[i].city);
                }
                if (jobPostings[i].stateProvinceName) {
                    locationArray.push(jobPostings[i].stateProvinceName);
                }
                if (jobPostings[i].countryName) {
                    locationArray.push(jobPostings[i].countryName);
                }
                var locationString = locationArray.join(", ");
                jobPostings[i].location = locationString;
                // Build compensation, experience and duration
                if (jobPostings[i].compensation) {
                    jobPostings[i].compensationString = sabio.page.compensationStringBuilder(jobPostings[i].compensation, jobPostings[i].compensationRateId);
                }
                if (jobPostings[i].experienceLevelId) {
                    jobPostings[i].experienceLevel = sabio.page.convertExperienceLevelId(jobPostings[i].experienceLevelId);
                }
                if (jobPostings[i].fullPartId || jobPostings[i].contractPermanentId) {
                    jobPostings[i].duration = sabio.page.durationStringBuilder(jobPostings[i].fullPartId, jobPostings[i].contractPermanentId);
                }
            }
            console.log(jobPostings);
            $("#jobPosting").tmpl(jobPostings).appendTo("#jobPostingContainer");
        }

        sabio.page.convertExperienceLevelId = function (id) {
            var string = "";
            switch (id) {
                case 1:
                    string = "Entry level";
                    break;
                case 2:
                    string = "Mid-level";
                    break;
                case 3:
                    string = "Senior level";
                    break;
                default:
                    break;
            }
            return string;
        }

        sabio.page.compensationStringBuilder = function (amt, rate) {
            var formattedAmt = amt.toFixed(2).replace(/(\d)(?=(\d{3})+\.)/g, '$1,');
            var formattedRate = "";
            if (rate) {
                switch (rate) {
                    case 1:
                        formattedRate = " per hour";
                        break;
                    case 2:
                        formattedRate = " per day";
                        formattedAmt = formattedAmt.slice(0, -3);
                        break;
                    case 3:
                        formattedRate = " per year";
                        formattedAmt = formattedAmt.slice(0, -3);
                        break;
                    default:
                        break;
                }
            }
            return "$" + formattedAmt + formattedRate;
        }

        sabio.page.durationStringBuilder = function (fullPartId, contractPermanentId) {
            var stringArray = [];
            if (fullPartId) {
                switch (fullPartId) {
                    case 1:
                        stringArray.push("Part-time");
                        break;
                    case 2:
                        stringArray.push("Full-time");
                        break;
                    case 3:
                        stringArray.push("Part-time to full-time");
                        break;
                    default:
                        break;
                }
            }
            if (contractPermanentId) {
                switch (contractPermanentId) {
                    case 1:
                        stringArray.push("Contract");
                        break;
                    case 2:
                        stringArray.push("Permanent");
                        break;
                    case 3:
                        stringArray.push("Contract-to-hire");
                        break;
                    default:
                        break;
                }
            }
            var string = stringArray.join(", ");
            return string;
        }

        sabio.page.handlers.viewPosting = function () {
            var id = $(this).closest(".result-price").attr("id");
            window.location.href = "/jobpostings/" + id;
        }

        sabio.page.startUp = function () {
            sabio.services.company.selectById(sabio.page.id, sabio.page.onGetSuccess, sabio.page.onGetError);
            $("#jobPostingContainer").on("click", ".view", sabio.page.handlers.viewPosting);
        };

    </script>
}

